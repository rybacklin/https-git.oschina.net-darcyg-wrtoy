--- a/drivers/spi/spi-rt2880.c	2014-07-05 18:44:27.447968000 +0800
+++ b/drivers/spi/spi-rt2880.c	2014-07-09 23:36:57.000000000 +0800
@@ -29,8 +29,8 @@
 #define SPI_BPW_MASK(bits) BIT((bits) - 1)
 
 #define DRIVER_NAME			"spi-rt2880"
-/* only one slave is supported*/
-#define RALINK_NUM_CHIPSELECTS		1
+/* Manfeel: mod to support two slaves */
+#define RALINK_NUM_CHIPSELECTS		2
 /* in usec */
 #define RALINK_SPI_WAIT_MAX_LOOP	2000
 
@@ -40,6 +40,10 @@
 #define RAMIPS_SPI_DATA			0x20
 #define RAMIPS_SPI_FIFO_STAT		0x38
 
+/* Manfeel: SPI_GPIO_MODE */
+#define RAMIPS_SPI_GPIO     0x60
+#define RAMIPS_SPI_ARB      0xf0
+
 /* SPISTAT register bit field */
 #define SPISTAT_BUSY			BIT(0)
 
@@ -94,6 +98,8 @@
 	unsigned int		speed;
 	struct clk		*clk;
 	spinlock_t		lock;
+	// Manfeel: add chipselect	
+	uint16_t		chipselect;
 
 	struct rt2880_spi_ops	*ops;
 };
@@ -211,6 +217,20 @@
 
 static void rt2880_spi_set_cs(struct rt2880_spi *rs, int enable)
 {
+	int cs = rs->chipselect;
+	// read out
+	u32 val = ioread32(rs->base + RAMIPS_SPI_ARB);  //RAMIPS_SPI_ARB  0x00f0
+
+	// swtich between CS0 and CS1
+	if (cs == 0) {
+		val &= ~(1<<16);
+	} else if(cs == 1) {
+		val |= (1<<16);
+	}
+
+	// write back
+	iowrite32(val, rs->base + RAMIPS_SPI_ARB);
+
 	if (enable)
 		rt2880_spi_clrbits(rs, RAMIPS_SPI_CTL, SPICTL_SPIENA);
 	else
@@ -439,6 +459,9 @@
 				par_override = 0;
 		}
 
+		// Manfeel: get the chipselect number		
+		rs->chipselect = spi->chip_select;
+
 		if (!cs_active) {
 			rs->ops->set_cs(rs, 1);
 			cs_active = 1;
@@ -492,6 +515,12 @@
 			 SPICFG_MSBFIRST | SPICFG_TXCLKEDGE_FALLING |
 			 SPICFG_SPICLK_DIV16 | SPICFG_SPICLKPOL);
 	rt2880_spi_write(rs, RAMIPS_SPI_CTL, SPICTL_HIZSDO | SPICTL_SPIENA);
+
+	// Manfeel: set CS1 pin
+	void __iomem *base_gpio = rs->base - 0xb00;
+	u32 val_gpio = ioread32(base_gpio + RAMIPS_SPI_GPIO);
+	val_gpio &= ~(3 << 11);
+	iowrite32(val_gpio,base_gpio + RAMIPS_SPI_GPIO);
 }
 
 static void mt7621_spi_reset(struct rt2880_spi *rs)
